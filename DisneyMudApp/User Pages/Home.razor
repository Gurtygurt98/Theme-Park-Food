@page "/"
@using DisneyMudApp
@using MudBlazor
@using SQL_API.Data
@using SQL_API.Models
@inject IParkData _dbPark;
@inject IFestivalData _dbFestival;

<MudText Typo="Typo.h2" Align="Align.Center">Theme Park Bites</MudText>
<MudGrid>
    @*parks*@
    <MudItem xs="12" >
        <MudText Typo="Typo.h3" >Parks</MudText>
        @if (FestivalList.Any())
        {
            

            <MudStack>

            
            @foreach (ParkModel park in ParksList)
            {
                <MudLink Typo="Typo.h4" Href="@LinkToPark(park)" Color="Color.Primary"> @park.ParkName</MudLink>
            }
            </MudStack>
            
        }
    </MudItem>
    <MudItem xs="12" >
        <MudText Typo="Typo.h2" >Festivals</MudText>
        @if (FestivalList.Any())
        {
            <MudStack>

            @foreach(FestivalModel festival in FestivalList)
            {
                <MudLink Typo="Typo.h4" Href="@LinkToFestival(festival)" Color="Color.Primary">@festival.FestivalName</MudLink>
            }
            </MudStack>

        }
    </MudItem>
</MudGrid>


@code {
    List<ParkModel> ParksList = new List<ParkModel>();
    List<FestivalModel> FestivalList = new List<FestivalModel>();
    string link;
    // Function that intiallizes the webpage
    protected override async Task OnInitializedAsync()
    {
        // Call methods to get festivals and parks that are in the database, will be used 
        CreateFestivalList();
        CreateParkList();

    }
    // Get Park List, Queries the database 
    public async void CreateParkList()
    {
        ParksList = await _dbPark.GetParkData();
    }
    // Get Festival List, Queries the database 
    public async void CreateFestivalList()
    {
        FestivalList = await _dbFestival.GetFestivalData();
    }
    private string LinkToPark(ParkModel park)
    {
        return $"/Parks/{park.ParkName}";
    }
    private string LinkToFestival(FestivalModel festival)
    {
        return $"/Festival/{festival.FestivalName}";
    }
}
