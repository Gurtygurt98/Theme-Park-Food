@*
    Project Developed by : Austin Phillips
    Page was Implemented using MudBlazor Components : https://mudblazor.com/
    Page Description: This page provides a template for how a user request for a Park menu is handled

*@
@*Park name is specifed in the url, Passed as a parameter*@
@page "/Parks/{ParkName}"
@*Imports for C# utilities and database interfaces that are needed *@
@using MudBlazor
@using SQL_API
@using SQL_API.Models
@using SQL_API.Data
@using System.Text;
@inject IParkData _dbPark;
@inject IAreaData _dbArea;
@inject IAllergyData _dbAllergy;
@inject ITagData _dbTag;
@inject ILocationData _dbLocation;
@inject IJSRuntime JSRuntime

<MudGrid Spacing="4">
    @*Display Header, with error handling for a park that is not found*@
    <MudItem xs="12">
        <MudText Typo="Typo.h2" Align="Align.Center">@(ParkMenu != null ? ParkMenu.ParkName : "Park not found")</MudText>
    </MudItem>
    <MudItem xs="12">
        @*Display Description, with error handling for a park that is not found*@
        <MudText Typo="Typo.subtitle1">@(ParkMenu != null ? ParkMenu.Description : "Park not found - desc")</MudText>
    </MudItem>
    <MudDivider Style="padding-bottom: 20px"></MudDivider>
    <MudItem xs="12">
        @*Buttons used for toggling the filter inputs and the button to download the pdf, function calls explained in the code section*@
        <MudStack Row="@true">
                <MudToggleIconButton Style="padding-bottom: 20px" Icon="@Icons.Outlined.FilterAlt" Color="Color.Primary" @onclick="@ToggleFilterPopover"></MudToggleIconButton>
                <MudButton Style="padding-bottom: 20px" Color="Color.Primary" @onclick="@GeneratePDF">Generate PDF</MudButton>
        </MudStack>
    </MudItem>
    <MudItem xs="12">
        @*Provides user input section for filter specifications *@
        @if(FilterPopover){
            <div style="padding-left:10px">


                <MudSelect T="string" Label="Areas" AnchorOrigin="Origin.BottomCenter" MultiSelection="true" @bind-SelectedValues="AreaFilters">
                    @foreach (String area in AreaList)
                {
                    <MudSelectItem T="string" Value="@area">@area</MudSelectItem>
                }
                </MudSelect>
                <MudSelect T="string" Label="Locations" AnchorOrigin="Origin.BottomCenter" MultiSelection="true" @bind-SelectedValues="LocationFilters">
                    @foreach (String location in LocationList)
                    {
                        <MudSelectItem T="string" Value="@location">@location</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="string" Label="Tags" AnchorOrigin="Origin.BottomCenter" MultiSelection="true" @bind-SelectedValues="TagFilters">
                    @foreach (String tag in TagList)
                    {
                        <MudSelectItem T="string" Value="@tag">@tag</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="string" Label="Allergies" AnchorOrigin="Origin.BottomCenter" MultiSelection="true" @bind-SelectedValues="AllergyFilters">
                    @foreach (String allergy in AllergyList)
                    {
                        <MudSelectItem T="string" Value="@allergy">@allergy</MudSelectItem>
                    }
                </MudSelect>
                <MudDivider>
                </MudDivider>
                <MudStack Row="true">
                    <MudButton OnClick="@ToggleFilterPopover" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large">Close</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="@UpdateMenu">Submit</MudButton>
                </MudStack>
            </div>
        }
    </MudItem>

    @*Display the menu, stored in the MenuList - List, will only display items that meet the filtering requirments  *@

    @if(ParkMenu.Areas.Any()){
        @foreach(AreaModel area in ParkMenu.Areas){

            <MudItem xs="12">
                <MudText Typo="Typo.h3" Style="margin-left: 10px; text-decoration: underline; padding-top:20px;">@area.AreaName</MudText>
            </MudItem>
            @foreach(LocationModel location in area.Locations)
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.h4" Style="margin-left: 30px;  text-decoration: underline;">@location.LocationName</MudText>
                </MudItem>
                @foreach(FoodModel food in location.Foods)
                {
                    <MudItem xs="12">
                        <MudText Typo="Typo.h5" Style="margin-left: 50px;">@food.FoodName - $@food.Price</MudText>
                    </MudItem>
                }
            }
        }
    }
</MudGrid>
@code {
    // Main Menu Data structure 
    ParkModel ParkMenu = new ParkModel();
    ParkModel OriginalParkMenu = new ParkModel();

    // Used for filters 
    List<string> AreaList = new List<string>();
    List<string> LocationList = new List<string>();
    List<string> TagList = new List<string>();
    List<string> AllergyList = new List<string>();
    private IEnumerable<string> AreaFilters { get; set; } = new HashSet<string>();
    private IEnumerable<string> LocationFilters { get; set; } = new HashSet<string>();
    private IEnumerable<string> TagFilters { get; set; } = new HashSet<string>();
    private IEnumerable<string> AllergyFilters { get; set; } = new HashSet<string>();
    Boolean testing = true;
    String CurrentArea;
    String CurrentLocation;
    Boolean FilterPopover = false;
    int PrintCount;
    // Parameter used for creating the page 
    [Parameter] public string ParkName { get; set; }
    // Runs on page intialization, queries database to gather menu and filtering data 
    protected override async Task OnInitializedAsync()
    {
        // Filtering Data 
        AreaList = await _dbArea.GetAllAreas(ParkName);
        LocationList = await _dbLocation.GetLocations(ParkName);
        TagList = await _dbTag.GetTags();
        AllergyList = await _dbAllergy.GetAllergies();
        // Build Menu
        OriginalParkMenu = await _dbPark.GetParkMenuAsync(ParkName);
        ParkMenu = OriginalParkMenu;

    }
    // Control Pop over for filter
    public void ToggleFilterPopover()
    {
        if (FilterPopover)
        {
            FilterPopover = false;
            return;
        }
        FilterPopover = true;
    }
    // Apply filters to the menu data structure 
    public void UpdateMenu()
    {
        // Copy the original ParkMenu to apply filters without querying the database again
        ParkMenu = new ParkModel
            {
                ParkName = OriginalParkMenu.ParkName,
                Description = OriginalParkMenu.Description,
                Areas = new List<AreaModel>(OriginalParkMenu.Areas.Select(a => new AreaModel
                {
                    AreaName = a.AreaName,
                    Locations = new List<LocationModel>(a.Locations)
                }))
            };

        // Apply Area Filter
        if (AreaFilters.Any())
        {
            ParkMenu.Areas = ParkMenu.Areas
                .Where(area => AreaFilters.Contains(area.AreaName))
                .ToList();
        }

        // Apply Location Filter
        foreach (var area in ParkMenu.Areas.ToList())
        {
            if (LocationFilters.Any())
            {
                area.Locations = area.Locations
                    .Where(location => LocationFilters.Contains(location.LocationName))
                    .ToList();
            }

            // Remove the area if it has no locations after filtering
            if (!area.Locations.Any())
            {
                ParkMenu.Areas.Remove(area);
            }
        }

        // Apply Tag and Allergy Filters
        foreach (var area in ParkMenu.Areas)
        {
            foreach (var location in area.Locations.ToList())
            {
                location.Foods = location.Foods
                    .Where(food =>
                        (!TagFilters.Any() || TagFilters.Any(tag => food.Tags?.Contains(tag) == true)) &&
                        (!AllergyFilters.Any() || AllergyFilters.Any(allergy => food.Allergies?.Contains(allergy) == true))
                    ).ToList();

                // Remove the location if it has no foods after filtering
                if (!location.Foods.Any())
                {
                    area.Locations.Remove(location);
                }
            }
        }

        // Trigger UI update
        StateHasChanged();
        ToggleFilterPopover();
    }
    // Prints the park menu to a pdf 
    private string FormatParkMenuForPDF()
    {
        if (ParkMenu == null)
            return "Park information is not available.";

        var stringBuilder = new StringBuilder();
        stringBuilder.AppendLine(ParkMenu.ParkName);
        stringBuilder.AppendLine();

        foreach (var area in ParkMenu.Areas)
        {
            stringBuilder.AppendLine($"{area.AreaName}");
            foreach (var location in area.Locations)
            {
                stringBuilder.AppendLine($"     {location.LocationName}");
                foreach (var food in location.Foods)
                {
                    stringBuilder.AppendLine($"       {food.FoodName} - ${food.Price}");
                    // Add more details here as needed
                }
            }
            stringBuilder.AppendLine();
        }

        return stringBuilder.ToString();
    }
    private async Task GeneratePDF()
    {
        //Generate PDF using java script function 
        var parkMenuText = FormatParkMenuForPDF();
        await JSRuntime.InvokeVoidAsync("createPdfFromText", parkMenuText, ParkMenu.ParkName ?? "Error");
    }

}
