@page "/Festivals"
@using DisneyMudApp
@using MudBlazor
@using SQL_API.Data
@using SQL_API.Models
@inject IFestivalData _db;
<MudText Typo="Typo.h2">Festival Data</MudText>
@if(FestivalList.Any())
{
<MudDataGrid Items="@FestivalList">
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Festival Name" />
        <PropertyColumn Property="x => x.Location" Title="Location" />
        <PropertyColumn Property="x => x.StartDate" Title="Start" />
        <PropertyColumn Property="x => x.EndDate" Title="End" />
        <PropertyColumn Property="x => x.Description" Title="Description"/>
        <TemplateColumn >
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Error" @onclick="() => Delete(context.Item)">Delete</MudIconButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

}

@code {
    public List<FestivalModel> FestivalList = new List<FestivalModel>();
    protected override async Task OnInitializedAsync()
    {
        FestivalList = await _db.GetFestivalData();
    }
    async Task Delete(FestivalModel item)
    {
        await _db.DeleteFestival(item);

        // After deleting, you might want to refresh the data by calling GetFestivalData again
        FestivalList = await _db.GetFestivalData();
    }
    async Task Edit(FestivalModel item)
    {
        // Create method based on DataGrid webpage example with a pop up to edit information about the 

        // After deleting, you might want to refresh the data by calling GetFestivalData again
        FestivalList = await _db.GetFestivalData();
    }

}
