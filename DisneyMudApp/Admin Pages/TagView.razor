@page "/TagAdmin"
@using DisneyMudApp
@using MudBlazor
@using SQL_API.Data
@using SQL_API.Models
@inject ITagData _db;
@inject IJSRuntime JSRuntime

<MudText Typo="Typo.h2">Tag Data</MudText>

@if (IsAdmin)
{
    <MudPopover Open="@isOpenEdit" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.CenterCenter">
        <MudForm>
            <MudGrid>
                <MudItem xs="10">
                    <MudStack>
                        <MudTextField Label="Tag Name" @bind-Value="TagName" />
                        <MudTextField Label="Food Name" @bind-Value="FoodName" />
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudForm>
        <MudButtonGroup>
            <MudButton OnClick="@ToggleEditPopover" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large">Close</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" OnClick="DeleteTag">Delete</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="UpdateTag">Update</MudButton>
        </MudButtonGroup>
    </MudPopover>

    @if (TagList.Any())
    {
        <MudDataGrid Items="TagList" Virtualize="true" Striped="true">
            <Columns>
                <PropertyColumn Property="x => x.ID" Title="ID" />
                <PropertyColumn Property="x => x.TagName" Title="Tag Name" />
                <PropertyColumn Property="x => x.FoodName" Title="Food Name" />
                <TemplateColumn>
                    <CellTemplate>
                        <MudStack Row>
                         <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => EditTag(context.Item)">Edit</MudIconButton>
                     </MudStack>
                 </CellTemplate>
             </TemplateColumn>
         </Columns>
     </MudDataGrid>
    }
}
else
{
    <MudText Typo="Typo.h3">Unauthorized Access</MudText>
    <MudLink Typo="Typo.h4" Href="/" Color="Color.Primary">Return to Home</MudLink>
}

@code {
    bool isOpenEdit = false;
    int ID;
    string? TagName = "";
    string? FoodName = "";
    List<TagModel> TagList = new List<TagModel>();
    private bool IsAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        TagList = await _db.GetTagData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "adminToken");
            IsAdmin = token == "ThemeParkBites";
            StateHasChanged();
        }
    }

    public void ToggleEditPopover()
    {
        ResetInputs();
        isOpenEdit = !isOpenEdit;
    }

    public void ResetInputs()
    {
        TagName = "";
        FoodName = "";
    }

    public void EditTag(TagModel item)
    {
        ToggleEditPopover();
        ID = item.ID;
        TagName = item.TagName;
        FoodName = item.FoodName;
    }

    public async Task DeleteTag()
    {
        await _db.DeleteTag(new TagModel(ID, TagName, FoodName));
        ToggleEditPopover();
        TagList = await _db.GetTagData();
    }

    public async Task UpdateTag()
    {
        await _db.UpdateTag(new TagModel(ID, TagName, FoodName));
        ToggleEditPopover();
        TagList = await _db.GetTagData();
    }
}
