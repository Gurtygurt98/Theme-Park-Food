@page "/AreaAdmin"
@using DisneyMudApp
@using MudBlazor
@using SQL_API.Data
@using SQL_API.Models
@inject IAreaData _db;
@inject IParkData _dbParks;
<MudText Typo="Typo.h2">Area Data</MudText>
@* Pop Over for adding a new item to the database. May change from mudicon button to a normal button with a better menu above the datagrid *@
<MudToolBar>
    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" @onclick="@ToggleAddPopover"></MudIconButton>
</MudToolBar>
@*Add Pop over *@
<MudPopover Open="@isOpenAdd" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" MinHeight="700px" MinWidth="700px" Width="" Height="50%">
        <MudForm>
            <MudGrid>
                <MudItem xs="10">
                    <MudStack>
                        <MudSelect @bind-Value="ParkItem" T="ParkModel" Label="Park List" AnchorOrigin="Origin.BottomCenter" MultiSelection="@false">
                            @foreach (ParkModel parks in ParkList)
                            {
                                <MudSelectItem Value="@(parks)" />
                            }
                        </MudSelect>
                        <MudTextField Label="Area Name" @bind-Value="AreaName"/>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudForm>
        <MudButtonGroup>
            <MudButton OnClick="@ToggleAddPopover" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large">Close</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="AddArea">Submit</MudButton>
        </MudButtonGroup>
</MudPopover>
@*Edit Delete Pop over *@
<MudPopover Open="@isOpenEdit" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
    <MudForm>
        <MudGrid>
            <MudItem xs="10">
                <MudStack>
                    <MudSelect @bind-Value="ParkItem" T="ParkModel" Label="Park List" AnchorOrigin="Origin.BottomCenter" MultiSelection="@false">
                        @foreach (ParkModel parks in ParkList)
                        {
                            <MudSelectItem Value="@(parks)" />
                        }
                    </MudSelect>
                    <MudTextField Label="Area Name" @bind-Value="AreaName" />
                </MudStack>
            </MudItem>
s        </MudGrid>
    </MudForm>
    <MudButtonGroup>
        <MudButton OnClick="@ToggleEditPopover" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large">Close</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" OnClick="DeleteArea">Delete</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="UpdateArea">Update</MudButton>
    </MudButtonGroup>
</MudPopover>

@* Datagrid for all data in the parks database *@
@if (AreaList.Any())
{
    <MudDataGrid Items="AreaList" Virtualize="true" Striped="true">
        <Columns>
            <PropertyColumn Property="x => x.ID" Title="ID" />
            <PropertyColumn Property="x => x.AreaName" Title="Area Name" />
            <PropertyColumn Property="x => x.ParkName" Title="Park Name" />
            <TemplateColumn>
                <CellTemplate>
                    <MudStack Row>
                     @* Change the delete function to prompt the user if they are sure they want to delete, also add an edit button that creates a pop up  *@
                     <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => EditArea(context.Item)">Edit</MudIconButton>
                 </MudStack>
             </CellTemplate>
         </TemplateColumn>
     </Columns>
 </MudDataGrid>

}

@code {
    // Variable declaration
    bool isOpenAdd = false;
    bool isOpenEdit = false;
    int ID;
    ParkModel ParkItem;
    string? ParkName = "";
    string? AreaName = "";
    List<AreaModel> AreaList= new();
    List<ParkModel> ParkList = new List<ParkModel>();
    // Loads the ParkList with data from the park database
    protected override async Task OnInitializedAsync()
    {
        ParkList = await _dbParks.GetParkData();
        AreaList = await _db.GetAreaData();
    }
    // Toggles the Add Popover
    public void ToggleAddPopover()
    {
        ResetInputs();
        if (isOpenAdd)
        {
            isOpenAdd = false;
            return;
        }
        isOpenEdit = false;
        isOpenAdd = true;
    }
    // Toggless the Edit Popover
    public void ToggleEditPopover()
    {
        ResetInputs();
        if (isOpenEdit)
        {
            isOpenEdit = false;
            return;
        }
        isOpenEdit = true;
        isOpenAdd = false;
    }
    public void ResetInputs()
    {
        ParkName = "";
        ParkItem = new ParkModel();
        AreaName = "";
    }
    // Called by popover button to submit and add an item to the park database
    public async Task AddArea()
    {
        ParkName = ParkItem.ParkName;
        await _db.insertArea(new AreaModel(AreaName, ParkName));
        ToggleAddPopover();
        AreaList = await _db.GetAreaData();
    }
    public void EditArea(AreaModel item)
    {
        // Create method based on DataGrid webpage example with a pop up to edit information about the

        ToggleEditPopover();
        ID = item.ID;
        AreaName = item.AreaName;
        ParkItem = new ParkModel(item.ParkName);
    }
    // Called by the Delete Festival button that is on each edit popover
    public async Task DeleteArea()
    {
        await _db.DeleteArea(new AreaModel(ID,AreaName, ParkName));
        ToggleEditPopover();
        AreaList = await _db.GetAreaData();
    }
    public async Task UpdateArea()
    {
        ParkName = ParkItem.ParkName;
        await _db.UpdateArea(new AreaModel(ID,AreaName, ParkName));
        ToggleEditPopover();
        AreaList = await _db.GetAreaData();
    }
}

