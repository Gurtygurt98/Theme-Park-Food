@page "/ParkAdmin"
@using DisneyMudApp
@using MudBlazor
@using SQL_API.Data
@using SQL_API.Models
@inject IParkData _db;
@inject IJSRuntime JSRuntime

<MudText Typo="Typo.h2">Park Data</MudText>

@if (IsAdmin)
{
    <MudToolBar>
        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" @onclick="@ToggleAddPopover"></MudIconButton>
    </MudToolBar>
    <MudPopover Open="@isOpenAdd" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.CenterCenter">
        <MudForm>
            <MudGrid>
                <MudItem xs="10">
                    <MudStack>
                        <MudTextField Label="Park Name" @bind-Value="ParkName" />
                        <MudTextField Label="Description" @bind-Value="Description" Lines="3" />
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudForm>
        <MudButtonGroup>
            <MudButton OnClick="@ToggleAddPopover" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large">Close</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="AddPark">Submit</MudButton>
        </MudButtonGroup>
    </MudPopover>
    <MudPopover Open="@isOpenEdit" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.CenterCenter">
        <MudForm>
            <MudGrid>
                <MudItem xs="10">
                    <MudStack>
                        <MudTextField Label="Park Name" @bind-Value="ParkName" />
                        <MudTextField Label="Description" @bind-Value="Description" Lines="3" />
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudForm>
        <MudButtonGroup>
            <MudButton OnClick="@ToggleEditPopover" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large">Close</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" OnClick="DeletePark">Delete</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="UpdatePark">Update</MudButton>
        </MudButtonGroup>
    </MudPopover>
    @if (ParkList.Any())
    {
        <MudDataGrid Items="ParkList" Virtualize="true" Striped="true">
            <Columns>
                <PropertyColumn Property="x => x.ID" Title="ID" />
                <PropertyColumn Property="x => x.ParkName" Title="Park Name" />
                <PropertyColumn Property="x => x.Description" Title="Description" />
                <TemplateColumn>
                    <CellTemplate>
                        <MudStack Row>
                         <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => EditPark(context.Item)">Edit</MudIconButton>
                     </MudStack>
                 </CellTemplate>
             </TemplateColumn>
         </Columns>
     </MudDataGrid>
    }
}
else
{
    <MudText Typo="Typo.h3">Unauthorized Access</MudText>
    <MudLink Typo="Typo.h4" Href="/" Color="Color.Primary">Return to Home</MudLink>
}

@code {
    bool isOpenAdd = false;
    bool isOpenEdit = false;
    int id;
    string? ParkName = "";
    string? Description = "";
    List<ParkModel> ParkList = new();
    private bool IsAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        ParkList = await _db.GetParkData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "adminToken");
            IsAdmin = token == "ThemeParkBites";
            StateHasChanged();
        }
    }

    // Toggles the Add Popover
    public void ToggleAddPopover()
    {
        ResetInputs();
        if (isOpenAdd)
        {
            isOpenAdd = false;
            return;
        }
        isOpenEdit = false;
        isOpenAdd = true;
    }
    // Toggless the Edit Popover
    public void ToggleEditPopover()
    {
        ResetInputs();
        if (isOpenEdit)
        {
            isOpenEdit = false;
            return;
        }
        isOpenEdit = true;
        isOpenAdd = false;
    }
    public void ResetInputs()
    {
        ParkName = "";
        Description = "";
    }
    // Called by popover button to submit and add an item to the park database
    public async Task AddPark()
    {
        await _db.insertPark(new ParkModel(ParkName, Description));
        ToggleAddPopover();
        ParkList = await _db.GetParkData();
    }
    public void EditPark(ParkModel item)
    {
        // Create method based on DataGrid webpage example with a pop up to edit information about the

        ToggleEditPopover();
        id = item.ID;
        ParkName = item.ParkName;
        Description = item.Description;
    }
    // Called by the Delete Festival button that is on each edit popover
    public async Task DeletePark()
    {
                await _db.DeletePark(new ParkModel(ParkName, Description));
        ToggleEditPopover();
        ParkList = await _db.GetParkData();
    }
    public async Task UpdatePark()
    {
        await _db.UpdatePark(new ParkModel(ParkName, Description));
        ToggleEditPopover();
        ParkList = await _db.GetParkData();
    }
}

