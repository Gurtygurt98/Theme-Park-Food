@page "/Festivals"
@using DisneyMudApp
@using MudBlazor
@using SQL_API.Data
@using SQL_API.Models
@inject IFestivalData _db;
<MudText Typo="Typo.h2">Festival Data</MudText>
@* Pop Over for adding a new item to the database. May change from mudicon button to a normal button with a better menu above the datagrid *@
<MudToolBar>
    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" @onclick="@ToggleAddPopover"></MudIconButton>
</MudToolBar>
@*Add Pop over *@
<MudPopover Open="@isOpenAdd" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.CenterCenter">
    <MudForm >
        <MudGrid>
            <MudItem xs="10">
                <MudStack>
                    <MudTextField Label="Festival Name" @bind-Value="FestivalName" />
                    <MudTextField Label="Location" @bind-Value="Location" />
                    <MudTextField Label="Description" @bind-Value="Description" Lines="3" />
                </MudStack>
            </MudItem>
            <MudItem xs="4">
                <MudDatePicker Label="Start Date" @bind-Date="StartDate" />
            </MudItem>
            <MudItem xs="4">
                <MudDatePicker Label="End Date" @bind-Date="EndDate" />
            </MudItem>
            <MudItem xs="4">

                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="AddFestival">Submit</MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>
    <MudButton OnClick="@ToggleAddPopover" Color="Color.Error">Close</MudButton>
</MudPopover>
@*Edit Pop over *@
<MudPopover Open="@isOpenEdit" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.CenterCenter">
    <MudForm>
        <MudGrid>
            <MudItem xs="10">
                <MudStack>
                    <MudTextField Label="Festival Name" @bind-Value="FestivalName" />
                    <MudTextField Label="Location" @bind-Value="Location" />
                    <MudTextField Label="Description" @bind-Value="Description" Lines="3" />
                </MudStack>
            </MudItem>
            <MudItem xs="4">
                <MudDatePicker Label="Start Date" @bind-Date="StartDate" />
            </MudItem>
            <MudItem xs="4">
                <MudDatePicker Label="End Date" @bind-Date="EndDate" />
            </MudItem>
            <MudItem xs="4">
                <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" OnClick="DeleteFestival">Delete</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="UpdateFestival">Update</MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>
    <MudButton OnClick="@ToggleEditPopover" Color="Color.Error">Close</MudButton>
</MudPopover>
@* Datagrid for all data in the festivals *@
@if(FestivalList.Any())
{
    <MudDataGrid Items="FestivalList" Virtualize="true" Striped="true">
    <Columns>
        <PropertyColumn Property="x => x.ID" Title="ID" />
        <PropertyColumn Property="x => x.Name" Title="Festival Name" />
        <PropertyColumn Property="x => x.Location" Title="Location" />
        <PropertyColumn Property="x => x.StartDate" Title="Start" />
        <PropertyColumn Property="x => x.EndDate" Title="End" />
        <PropertyColumn Property="x => x.Description" Title="Description"/>
        <TemplateColumn >
            <CellTemplate>
                <MudStack Row>
                     @* Change the delete function to prompt the user if they are sure they want to delete, also add an edit button that creates a pop up  *@
                     <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => EditFestival(context.Item)">Edit</MudIconButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

}

@code {
    // Variable declaration 
    bool isOpenAdd = false;
    bool isOpenDelete = false;
    bool isOpenEdit = false;
    // Festival Model Data
    int id;
    string? FestivalName = "";
    public DateTime? StartDate { get; set; } = DateTime.Now;
    public DateTime? EndDate { get; set; } = DateTime.Now;
    string? Location = "";
    string? Description = "";
    public List<FestivalModel> FestivalList = new List<FestivalModel>();
    // Loads the FestivalList with data from the festival database 
    protected override async Task OnInitializedAsync()
    {
        FestivalList = await _db.GetFestivalData();
    }
    // Toggles the Add Popover 
    public void ToggleAddPopover()
    {
        resetInputs();
        if (isOpenAdd)
        {
            isOpenAdd = false;
            return;
        }
        isOpenEdit = false;
        isOpenDelete = false;
        isOpenAdd = true;
    }
    // Toggless the Edit Popover
    public void ToggleEditPopover()
    {
        resetInputs();
        if (isOpenEdit)
        {
            isOpenEdit = false;
            return;
        }
        isOpenEdit = true;
        isOpenDelete = false;
        isOpenAdd = false;
    }
    // Called by the Delete Festival button that is on each edit popover
    public async Task DeleteFestival()
    {
        string startDateString = StartDate.Value.ToString("MM.dd.yyyy");
        string endDateString = EndDate.Value.ToString("MM.dd.yyyy");
        await _db.DeleteFestival(new FestivalModel(id, FestivalName, Location, startDateString, endDateString, Description));
        ToggleEditPopover();
        FestivalList = await _db.GetFestivalData();
    }
    // Edit to be added to each datagrid row 
    public async Task EditFestival(FestivalModel item)
    {
        // Create method based on DataGrid webpage example with a pop up to edit information about the 

        ToggleEditPopover();
        id = item.ID;
        FestivalName = item.Name;
        StartDate = DateTime.Parse(item.StartDate);
        EndDate = DateTime.Parse(item.EndDate);
        Location = item.Location;
        Description = item.Description;
        FestivalList = await _db.GetFestivalData();
    }
    public async Task UpdateFestival()
    {
        string startDateString = StartDate.Value.ToString("MM.dd.yyyy");
        string endDateString = EndDate.Value.ToString("MM.dd.yyyy");
        await _db.UpdateFestival(new FestivalModel(id,FestivalName, Location, startDateString, endDateString, Description));
        ToggleEditPopover();
        FestivalList = await _db.GetFestivalData();
    }
    // Called by popover button to submit and add an item to the festival database
    public async Task AddFestival()
    {
        string startDateString = StartDate.Value.ToString("MM.dd.yyyy");
        string endDateString = EndDate.Value.ToString("MM.dd.yyyy");
        await _db.insertFestivalJob(new FestivalModel(FestivalName, Location, startDateString, endDateString, Description));
        ToggleAddPopover();
        FestivalList = await _db.GetFestivalData();
    }
    // Used to reset inputs after a festival is edited or 
    public void resetInputs()
    {
        FestivalName = "";
        StartDate = DateTime.Now;
        EndDate = DateTime.Now;
        Location = "";
        Description = "";
    }

}
