@page "/FestivalAdmin"
@using DisneyMudApp
@using MudBlazor
@using SQL_API.Data
@using SQL_API.Models
@inject IParkData _dbParks;
@inject IFestivalData _db;
@inject IJSRuntime JSRuntime

<MudText Typo="Typo.h2">Festival Data</MudText>
@if (IsAdmin)
{
    @* Pop Over for adding a new item to the database. May change from mudicon button to a normal button with a better menu above the datagrid *@
    <MudToolBar>
        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" @onclick="@ToggleAddPopover"></MudIconButton>
    </MudToolBar>
    @*Add Pop over *@
    <MudPopover Open="@isOpenAdd" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.CenterCenter">
        <MudForm>
            <MudGrid>
                <MudItem xs="10">
                    <MudStack>
                        <MudTextField Label="Festival Name" @bind-Value="FestivalName" />
                        <MudSelect @bind-Value="ParkItem" T="ParkModel" Label="Park List" AnchorOrigin="Origin.BottomCenter" MultiSelection="@false">
                            @foreach (ParkModel parks in ParkList)
                            {
                                <MudSelectItem Value="@(parks)" />
                            }
                        </MudSelect>
                        <MudTextField Label="Description" @bind-Value="Description" Lines="3" />
                    </MudStack>
                </MudItem>
                <MudItem xs="4">
                    <MudDatePicker AutoClose="@true" Editable="true" Label="Start Date" @bind-Date="StartDate" />
                </MudItem>
                <MudItem xs="4">
                    <MudDatePicker AutoClose="@true" Editable="true" Label="End Date" @bind-Date="EndDate" />
                </MudItem>
            </MudGrid>
        </MudForm>
        <MudButtonGroup>
            <MudButton OnClick="@ToggleAddPopover" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large">Close</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="AddFestival">Submit</MudButton>
        </MudButtonGroup>
    </MudPopover>
    @*Edit Delete Pop over *@
    <MudPopover Open="@isOpenEdit" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.CenterCenter">

        <MudForm>
            <MudGrid>
                <MudItem xs="10">
                    <MudStack>
                        <MudTextField Label="Festival Name" @bind-Value="FestivalName" />
                        <MudSelect @bind-Value="ParkItem" T="ParkModel" Label="Park List" AnchorOrigin="Origin.BottomCenter" MultiSelection="@false">
                            @foreach (ParkModel parks in ParkList)
                            {
                                <MudSelectItem Value="@(parks)" />
                            }
                        </MudSelect>
                        <MudTextField Label="Description" @bind-Value="Description" Lines="3" />
                    </MudStack>
                </MudItem>
                <MudItem xs="4">
                    <MudDatePicker AutoClose="@true" Editable="true" Label="Start Date" @bind-Date="StartDate" />
                </MudItem>
                <MudItem xs="4">
                    <MudDatePicker AutoClose="@true" Editable="true" Label="End Date" @bind-Date="EndDate" />
                </MudItem>
            </MudGrid>
        </MudForm>
        <MudButtonGroup>
            <MudButton OnClick="@ToggleEditPopover" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large">Close</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" OnClick="DeleteFestival">Delete</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="UpdateFestival">Update</MudButton>
        </MudButtonGroup>
    </MudPopover>
    @* Datagrid for all data in the festivals *@
    @if (FestivalList.Any())
    {
        <MudDataGrid Items="FestivalList" Virtualize="true" Striped="true">
            <Columns>
                <PropertyColumn Property="x => x.ID" Title="ID" />
                <PropertyColumn Property="x => x.FestivalName" Title="Festival Name" />
                <PropertyColumn Property="x => x.ParkName" Title="Park" />
                <PropertyColumn Property="x => x.StartDate" Title="Start" />
                <PropertyColumn Property="x => x.EndDate" Title="End" />
                <PropertyColumn Property="x => x.Description" Title="Description" />
                <TemplateColumn>
                    <CellTemplate>
                        <MudStack Row>
                         @* Change the delete function to prompt the user if they are sure they want to delete, also add an edit button that creates a pop up  *@
                         <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => EditFestival(context.Item)">Edit</MudIconButton>
                     </MudStack>
                 </CellTemplate>
             </TemplateColumn>
         </Columns>
     </MudDataGrid>

    }
}
else
{
    <MudText Typo="Typo.h3">Please click the below link to access admin pages</MudText>
    <MudLink Typo="Typo.h4" Href="/AdminDashboard" Color="Color.Primary" Target="_blank">Dashboard</MudLink>

}



@code {
    // Variable declaration 
    bool isOpenAdd = false;
    bool isOpenEdit = false;
    Boolean IsAdmin = false;

    // Festival Model Data
    int id;
    ParkModel ParkItem;
    string? FestivalName = "";
    public DateTime? StartDate { get; set; } = DateTime.Now;
    public DateTime? EndDate { get; set; } = DateTime.Now;
    string? Park = "";
    string? Description = "";
    public List<FestivalModel> FestivalList = new List<FestivalModel>();
    public List<ParkModel> ParkList = new List<ParkModel>();
    // Loads the FestivalList with data from the festival database 
    protected override async Task OnInitializedAsync()
    {
        ParkList = await _dbParks.GetParkData();
        FestivalList = await _db.GetFestivalData();
    }
    // Checks if the user has entered a valid admin code
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "adminToken");
            IsAdmin = token == "ThemeParkBites";
            StateHasChanged(); // Re-render the component with updated state
        }
    }
    // Toggles the Add Popover 
    public void ToggleAddPopover()
    {
        ResetInputs();
        if (isOpenAdd)
        {
            isOpenAdd = false;
            return;
        }
        isOpenEdit = false;
        isOpenAdd = true;
    }
    // Toggless the Edit Popover
    public void ToggleEditPopover()
    {
        ResetInputs();
        if (isOpenEdit)
        {
            isOpenEdit = false;
            return;
        }
        isOpenEdit = true;
        isOpenAdd = false;
    }
    // Called by the Delete Festival button that is on each edit popover
    public async Task DeleteFestival()
    {
        string startDateString = StartDate.Value.ToString("MM.dd.yyyy");
        string endDateString = EndDate.Value.ToString("MM.dd.yyyy");
        await _db.DeleteFestival(new FestivalModel(id, FestivalName, Park, startDateString, endDateString, Description));
        ToggleEditPopover();
        FestivalList = await _db.GetFestivalData();
    }
    // Edit to be added to each datagrid row 
    public void EditFestival(FestivalModel item)
    {
        // Create method based on DataGrid webpage example with a pop up to edit information about the 

        ToggleEditPopover();
        id = item.ID;
        FestivalName = item.FestivalName;
        StartDate = DateTime.Parse(item.StartDate);
        EndDate = DateTime.Parse(item.EndDate);
        ParkItem = new ParkModel(item.ParkName);

        Description = item.Description;
    }
    public async Task UpdateFestival()
    {
        string startDateString = StartDate.Value.ToString("MM.dd.yyyy");
        string endDateString = EndDate.Value.ToString("MM.dd.yyyy");
        await _db.UpdateFestival(new FestivalModel(id, FestivalName, ParkItem.ParkName, startDateString, endDateString, Description));
        ToggleEditPopover();
        FestivalList = await _db.GetFestivalData();
    }
    // Called by popover button to submit and add an item to the festival database
    public async Task AddFestival()
    {
        string startDateString = StartDate.Value.ToString("MM.dd.yyyy");
        string endDateString = EndDate.Value.ToString("MM.dd.yyyy");
        await _db.insertFestival(new FestivalModel(FestivalName, Park, startDateString, endDateString, Description));
        ToggleAddPopover();
        FestivalList = await _db.GetFestivalData();
    }
    // Used to reset inputs after a festival is edited or 
    public void ResetInputs()
    {
        FestivalName = "";
        StartDate = DateTime.Now;
        EndDate = DateTime.Now;
        Park = "";
        Description = "";
    }



}
