@page "/FoodAdmin"
@using DisneyMudApp
@using MudBlazor
@using SQL_API.Data
@using SQL_API.Models
@using System.Globalization;
@inject IFoodData _db;
@inject IFestivalData _dbFest;
@inject ILocationData _dbLocation;
@inject IAllergyData _dbAllergy;
@inject ITagData _dbTag;
<MudText Typo="Typo.h2">Food Data</MudText>
@* Pop Over for adding a new item to the database. May change from mudicon button to a normal button with a better menu above the datagrid *@
<MudToolBar>
    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" @onclick="@ToggleAddPopover"></MudIconButton>
</MudToolBar>
@*Add Pop over *@
<MudPopover Open="@isOpenAdd" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter" Square="true" Width="200px">
    <MudGrid>
        <MudItem xs="12">
            <MudStack>

                <MudTextField Label="Food Name" @bind-Value="FoodName" />
                <MudTextField Label="Description" @bind-Value="Description" Lines="3" />
                <MudSelect @bind-Value="@LocationItem" T="LocationModel" Label="Locations" AnchorOrigin="Origin.BottomCenter" MultiSelection="@false">
                    @foreach (LocationModel location in LocationList)
                    {
                        <MudSelectItem Value="@(location)" />
                    }
                </MudSelect>

                <MudSelect @bind-SelectedValues="@FoodTagList" T="string" Label="Tags" AnchorOrigin="Origin.BottomCenter" MultiSelection="@true">
                    @foreach (string tags in TagList)
                    {
                        <MudSelectItem Value="@(tags)" />
                    }
                </MudSelect>
                <MudSelect @bind-SelectedValues="@FoodAllergyList" T="string" Label="Allergies" AnchorOrigin="Origin.BottomCenter" MultiSelection="@true">
                    @foreach (string allergies in AllergyList)
                    {
                        <MudSelectItem Value="@(allergies)" />
                    }
                </MudSelect>
                <MudSelect @bind-Value="@Cuisine" T="string" Label="Cuisine List" AnchorOrigin="Origin.BottomCenter" MultiSelection="@false">
                    @foreach (string cuisine in CuisineList)
                    {
                        <MudSelectItem Value="@(cuisine)" />
                    }
                </MudSelect>
                <MudSelect @bind-Value="@FoodType" T="string" Label="Food Type" AnchorOrigin="Origin.BottomCenter" MultiSelection="@false">
                    @foreach (string foodtype in FoodTypeList)
                    {
                        <MudSelectItem Value="@(foodtype)" />
                    }
                </MudSelect>

                <MudNumericField T="decimal" Culture="_en" Label="Price" @bind-Value="Price" />
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudToggleIconButton @bind-Toggled="isPerm" Icon="@Icons.Material.Filled.Update" ToggledIcon="@Icons.Material.Filled.UpdateDisabled"></MudToggleIconButton>
        </MudItem>

        @if (isPerm)
        {
            <MudItem xs="6">
                <MudDatePicker AutoClose="@true" Editable="true" Label="Start Date" @bind-Date="StartDate" />
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker AutoClose="@true" Editable="true" Label="End Date" @bind-Date="EndDate" />
            </MudItem>
        }
    </MudGrid>
    @*Buttons to submit and close *@
    <MudDivider></MudDivider>
    <MudButtonGroup>
        <MudButton OnClick="@ToggleAddPopover" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large">Close</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="AddFood">Submit</MudButton>
    </MudButtonGroup>
</MudPopover>
@*Edit Delete Pop over *@
<MudPopover Open="@isOpenEdit" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.CenterCenter">

    <MudForm>
        <MudGrid>
            <MudItem xs="10">
                <MudStack>

                    <MudTextField Label="Food Name" @bind-Value="FoodName" />
                    <MudTextField Label="Description" @bind-Value="Description" Lines="3" />
                    <MudSelect @bind-Value="@LocationItem" T="LocationModel" Label="Locations" AnchorOrigin="Origin.BottomCenter" MultiSelection="@false">
                        @foreach (LocationModel location in LocationList)
                        {
                            <MudSelectItem Value="@(location)" />
                        }
                    </MudSelect>

                    <MudSelect @bind-SelectedValues="@FoodTagList" T="string" Label="Tags" AnchorOrigin="Origin.BottomCenter" MultiSelection="@true">
                        @foreach (string tags in TagList)
                        {
                            <MudSelectItem Value="@(tags)" />
                        }
                    </MudSelect>
                    <MudSelect @bind-SelectedValues="@FoodAllergyList" T="string" Label="Allergies" AnchorOrigin="Origin.BottomCenter" MultiSelection="@true">
                        @foreach (string allergies in AllergyList)
                        {
                            <MudSelectItem Value="@(allergies)" />
                        }
                    </MudSelect>
                    <MudSelect @bind-Value="@Cuisine" T="string" Label="Cuisine List" AnchorOrigin="Origin.BottomCenter" MultiSelection="@false">
                        @foreach (string cuisine in CuisineList)
                        {
                            <MudSelectItem Value="@(cuisine)" />
                        }
                    </MudSelect>
                    <MudSelect @bind-Value="@FoodType" T="string" Label="Food Type" AnchorOrigin="Origin.BottomCenter" MultiSelection="@false">
                        @foreach (string foodtype in FoodTypeList)
                        {
                            <MudSelectItem Value="@(foodtype)" />
                        }
                    </MudSelect>

                    <MudNumericField T="decimal" Culture="_en" Label="Price" @bind-Value="Price" />
                </MudStack>
            </MudItem>
            <MudItem xs="4">
                <MudDatePicker Label="Start Date" @bind-Date="StartDate" />
            </MudItem>
            <MudItem xs="4">
                <MudDatePicker Label="End Date" @bind-Date="EndDate" />
            </MudItem>
        </MudGrid>
    </MudForm>
    @*Buttons*@
    <MudButtonGroup>
        <MudButton OnClick="@ToggleEditPopover" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large">Close</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" OnClick="DeleteFood">Delete</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="UpdateFood">Update</MudButton>
    </MudButtonGroup>
</MudPopover>
@* Datagrid for all data in the Foods *@
@if (FoodList.Any())
{
    <MudDataGrid Items="FoodList" Virtualize="true" Striped="true">
        <Columns>
            <TemplateColumn>
                <CellTemplate>
                    <MudStack Row>
                     @* Change the delete function to prompt the user if they are sure they want to delete, also add an edit button that creates a pop up  *@
                     <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => EditFood(context.Item)">Edit</MudIconButton>
                 </MudStack>
             </CellTemplate>
         </TemplateColumn>
         <PropertyColumn Property="x => x.ID" Title="ID" />
         <PropertyColumn Property="x => x.FoodName" Title="Food Name" />
         <PropertyColumn Property="x => x.LocationName" Title="Location" />
         <PropertyColumn Property="x => x.Price" Title="Price" />
         <PropertyColumn Property="x => x.ImageUrl" Title="Image Url" />
         <PropertyColumn Property="x => x.Cuisine" Title="Cuisine" />
         <PropertyColumn Property="x => x.FoodType" Title="FoodType" />
         <PropertyColumn Property="x => x.StartDate" Title="Start" />
         <PropertyColumn Property="x => x.EndDate" Title="End" />

     </Columns>
 </MudDataGrid>

}
@code {
    // Variable declaration
    bool isOpenAdd = false;
    bool isOpenLocation = false;
    bool isOpenEdit = false;
    bool isPerm = false;
    string Allergy;
    string Tag;
    public List<FoodModel> FoodList = new();
    public List<LocationModel> LocationList = new();
    public List<string> AllergyList = new();
    public List<string> CuisineList = new();
    public List<string> TagList = new();
    public List<string> FoodTypeList = new();
    string startDateString;
    string endDateString;
    public CultureInfo _en = CultureInfo.GetCultureInfo("en-US");
    // Food Model Data
    public int ID { get; set; }
    public string FoodName { get; set; }
    public string Description { get; set; }
    public string Location { get; set; }
    public decimal Price { get; set; }
    public string Park { get; set; }
    public string Cuisine { get; set; }
    public string ImageUrl { get; set; }
    public string FoodType { get; set; }
    public IEnumerable<string> FoodAllergyList = new HashSet<string>();
    public IEnumerable<string> FoodTagList = new HashSet<string>();
    public LocationModel LocationItem = new LocationModel();
    public DateTime? StartDate { get; set; } = DateTime.Now;
    public DateTime? EndDate { get; set; } = DateTime.Now;
    // Set inputs for food before DB insertion
    public void SetInputsFood()
    {

        startDateString = StartDate.Value.ToString("MM.dd.yyyy");
        endDateString = EndDate.Value.ToString("MM.dd.yyyy");
        ImageUrl = "/image/" + FoodName + ".jpg";
      

    }

    // reset input utility
    public void ResetInputsFood()
    {
        FoodAllergyList = new HashSet<string>();
        FoodTagList = new HashSet<string>();
        ID = 0;
        FoodName = "";
        Description = "";
        Location = "";
        Price = 0;
        Cuisine = "";
        ImageUrl = "";
        FoodType = "";
        StartDate = DateTime.Now;
        EndDate = DateTime.Now;
        isPerm = false;
        LocationItem = new LocationModel();
    }
    // Reset inputs for Location Model
    // Loads the FoodList with data from the Food database
    protected override async Task OnInitializedAsync()
    {
        CreateTagList();
        CreateAllergyList();
        CreateCuisineList();
        CreateFoodTypeList();
        CreateLocationList();
        FoodList = await _db.GetFoodData();
    }
    // Toggles the Add Popover
    public void ToggleAddPopover()
    {
        ResetInputsFood();
        if (isOpenAdd)
        {
            isOpenAdd = false;
            return;
        }
        isOpenEdit = false;
        isOpenAdd = true;
    }
    // Toggles the Edit Popover
    public void ToggleEditPopover()
    {
        ResetInputsFood();
        if (isOpenEdit)
        {
            isOpenEdit = false;
            return;
        }
        isOpenEdit = true;
        isOpenAdd = false;
    }
    // Called by the Delete Festival button that is on each edit popover
    public async Task DeleteFood()
    {
        string startDateString = StartDate.Value.ToString("MM.dd.yyyy");
        string endDateString = EndDate.Value.ToString("MM.dd.yyyy");
        await _db.DeleteFood(new FoodModel(ID, FoodName, Description, Location, Price, Cuisine, FoodType, ImageUrl, startDateString, endDateString));
        ToggleEditPopover();
        FoodList = await _db.GetFoodData();

    }
    // Edit to be added to each datagrid row
    public async Task EditFood(FoodModel item)
    {
        ToggleEditPopover();
        ID = item.ID;
        FoodName = item.FoodName;
        Description = item.Description;
        Location = item.LocationName;
        Price = item.Price;
        Cuisine = item.Cuisine;
        ImageUrl = item.ImageUrl;
        FoodType = item.FoodType;
        StartDate = DateTime.Parse(item.StartDate);
        EndDate = DateTime.Parse(item.EndDate);
    }
    // Called by popover button to submit and add an item to the Food database
    public async Task AddFood()
    {
        SetInputsFood();
        await _db.insertFood(new FoodModel(ID, FoodName, Description, Location, Price, Cuisine, FoodType, ImageUrl, startDateString, endDateString));
        await AddTags();
        await AddAllergies();
        FoodList = await _db.GetFoodData();
        ToggleAddPopover();

    }
    // Add tags 
    public async Task AddTags()
    {
        foreach(string tag in FoodTagList)
        {
            await _dbTag.insertTagJob(new TagModel(tag, FoodName));
        }
    }
    public async Task AddAllergies()
    {
        foreach (string allergy in FoodAllergyList)
        {
            await _dbAllergy.insertAllergy(new AllergyModel(allergy, FoodName));
        }
    }
    // Update Food 
    public async Task UpdateFood()
    {
        SetInputsFood();
        await _db.UpdateFood(new FoodModel(ID, FoodName, Description, Location, Price, Cuisine, FoodType, ImageUrl, startDateString, endDateString));
        ToggleEditPopover();
        FoodList = await _db.GetFoodData();
    }
    // Query Database for a list of locations currently in the database
    public async void CreateLocationList()
    {
        LocationList = await _dbLocation.GetLocationData();
    }
    public void CreateAllergyList()
    {
        AllergyList.Add("Peanuts");
        AllergyList.Add("Tree Nuts");
        AllergyList.Add("Milk");
        AllergyList.Add("Eggs");
        AllergyList.Add("Soy");
        AllergyList.Add("Wheat");
        AllergyList.Add("Fish");
        AllergyList.Add("Shellfish");
        AllergyList.Add("Shellfish");
    }
    public void CreateTagList()
    {
        TagList.Add("Fan Favorite");
        TagList.Add("Kid-Friendly");
        TagList.Add("Gourmet");
        TagList.Add("Snack");
        TagList.Add("Sweet Treats");
        TagList.Add("Savory Delights");
        TagList.Add("Healthy Options");
        TagList.Add("International Flavors");
        TagList.Add("Signature Dishes");
        TagList.Add("Vegetarian");
        TagList.Add("Gluten-Free");
        TagList.Add("Spicy");
        TagList.Add("Classic Comfort Food");
        TagList.Add("Exotic Eats");
        TagList.Add("On-the-Go");
        TagList.Add("Instagram-Worthy");

    }
    public void CreateCuisineList()
    {
        CuisineList.Add("Italian");
        CuisineList.Add("Mexican");
        CuisineList.Add("Chinese");
        CuisineList.Add("Indian");
        CuisineList.Add("Japanese");
        CuisineList.Add("Thai");
        CuisineList.Add("Greek");
        CuisineList.Add("Turkish");
        CuisineList.Add("French");
        CuisineList.Add("American");
        CuisineList.Add("Kenyan");
        CuisineList.Add("Moroccan");
        CuisineList.Add("Other");

    }
    public void CreateFoodTypeList()
    {

        FoodTypeList.Add("Fruit");
        FoodTypeList.Add("Vegetable");
        FoodTypeList.Add("Meat");
        FoodTypeList.Add("Seafood");
        FoodTypeList.Add("Pasta");
        FoodTypeList.Add("Rice");
        FoodTypeList.Add("Bread");
        FoodTypeList.Add("Dairy");
        FoodTypeList.Add("Snack");
        FoodTypeList.Add("Beverage");
    }


}
